openapi: 3.1.0
x-stoplight:
  id: wnn8cxurat78o
info:
  title: Projects and Tasks API
  version: '1.0'
  description: "“Projects and Tasks” is a project management tool that helps you take real action with simple planning, assigning, and task-tracking features. You can create projects with various tasks and assignments. Those tasks exist within swim lanes or lists, and can be moved from list to list to show progress through a particular workflow. You can use default lists or create new custom lists. You can also add attachments to individual tasks to reference relevant materials and other artifacts.\n\n<!-- theme: info -->\n> ### Note\n>\n>You will need to ensure that your client application has access to the Workflow scope in order to access the Projects and Tasks endpoints.\n\n## The project object\n### Attributes\n| Property Name | Type | Description |\n| --- | --- | --- |\nname | String | The name of the project\nid | String | The ID of the project\nmembers | Long | The ID's of the members of the project\ncreatedBy | Long | The ID of the user who created the project\ncreatedDate | Date | Date the project was created\npublic | Boolean | whether or not the project is a public project\ndescription | String | Description of the project\ndueDate | Date | Due date of the project\n\n## The list object\n### Attributes\n| Property Name | Type | Description |\n| --- | --- | --- |\n| name\t| String | The name of the List.|\n| id | String\t| The ID of the List.|\n| type | String\t| The type of List (i.e. `TODO`, `WORKING_ON`, `COMPLETED`).|\n| index\t| Long | The ordered index of the list within the project.|\n\n## The task object\n### Attributes\n| Property Name | Type | Description |\n| --- | --- | --- |\n|id | String | The ID of the task.|\n|projectId | String | The ID of the project that the task belongs to.|\n|projectListId\t| tring\t| The ID of the list within a project that the task belongs to.|\n|taskName | String | The name of the task.|\n|description | String\t| An optional description of the task.|\n|createdDate | ate | The date the task was created.|\n|dueDate | Date | The date the task is expected to be completed.|\n|priority | Long | The prioritized order of the task in a list.|\n|createdBy | Long | The ID of the Domo user that created the task.|\n|ownedBy | Long | The ID of the Domo user that owns the task.|\n|contributors | Long | An array of user IDs that are assigned as contributors to the task.|\n|attachmentCount | Long\t| The number of attachments that task has.|\n|tags | String\t| An array of tags that have been assigned to the task.|\n|archived | Boolean | Whether or not the task has been archived.|"
servers:
  - url: 'https://api.domo.com'
    description: Domo API
paths:
  /v1/projects:
    parameters: []
    get:
      summary: Retrieve all projects
      tags: []
      operationId: ''
      description: Retrieves a list of all projects that the client scope has access to.
      responses:
        '200':
          description: Returns an array of project objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    members:
                      type: array
                      items:
                        type: integer
                    createdBy:
                      type: integer
                    createdDate:
                      type: string
                    public:
                      type: boolean
                x-examples:
                  Example 1:
                    - id: '3'
                      name: Agile Project
                      members:
                        - 27
                        - 35
                        - 102
                      createdBy: 27
                      createdDate: '2018-08-01T01:00:00Z'
                      public: false
                    - id: '2'
                      name: Final Deliverable Progress
                      members:
                        - 1
                        - 27
                        - 150
                      createdBy: 1
                      createdDate: '2018-08-01T04:00:00Z'
                      public: true
              examples:
                Example 1:
                  value:
                    - id: '3'
                      name: Agile Project
                      members:
                        - 27
                        - 35
                        - 102
                      createdBy: 27
                      createdDate: '2018-08-01T01:00:00Z'
                      public: false
                    - id: '2'
                      name: Final Deliverable Progress
                      members:
                        - 1
                        - 27
                        - 150
                      createdBy: 1
                      createdDate: '2018-08-01T04:00:00Z'
                      public: true
    post:
      summary: Create a project
      operationId: ''
      description: Create a new project in your Domo instance
      parameters:
        - schema:
            type: string
          in: query
          name: name
          required: true
          description: The name of the project
        - schema:
            type: integer
          in: query
          name: members
          required: true
          description: Array of user ID's that will be assigned as members of the project
        - schema:
            type: boolean
          in: query
          name: public
          required: true
          description: Whether or not the project should be publicly available to other Domo users
        - schema:
            type: string
          in: query
          name: description
          description: Description of the project
        - schema:
            type: string
          in: query
          name: dueDate
          description: Due date of the project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                members:
                  type: array
                  items:
                    type: integer
                public:
                  type: string
              x-examples:
                Example 1:
                  name: Scrum Project
                  members:
                    - 27
                    - 105
                  public: 'TRUE'
            examples:
              Example 1:
                value:
                  name: Scrum Project
                  members:
                    - 27
                    - 105
                  public: 'TRUE'
        description: The request body accepts a project object.
      responses:
        '200':
          description: Returns a project object when successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  members:
                    type: array
                    items:
                      type: integer
                  createdBy:
                    type: integer
                  createdDate:
                    type: string
                  public:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '4'
                    name: Scrum Project
                    members:
                      - 27
                      - 105
                    createdBy: 27
                    createdDate: '2018-08-01T05:00:00Z'
                    public: true
              examples:
                Example 1:
                  value:
                    id: '4'
                    name: Scrum Project
                    members:
                      - 27
                      - 105
                    createdBy: 27
                    createdDate: '2018-08-01T05:00:00Z'
                    public: true
  '/v1/projects/{PROJECT_ID}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: ID of the project
    get:
      summary: Retrieve individual project
      operationId: ''
      description: |
        Retrieves the details of an individual existing project given a project id.

        Use the special project ID `me` to return your personal project.
      responses:
        '200':
          description: Returns a project object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  members:
                    type: array
                    items:
                      type: integer
                  createdBy:
                    type: integer
                  createdDate:
                    type: string
                  public:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '3'
                    name: Agile Project
                    members:
                      - 27
                      - 35
                      - 102
                    createdBy: 27
                    createdDate: '2018-08-01T01:00:00Z'
                    public: false
              examples:
                Example 1:
                  value:
                    id: '3'
                    name: Agile Project
                    members:
                      - 27
                      - 35
                      - 102
                    createdBy: 27
                    createdDate: '2018-08-01T01:00:00Z'
                    public: false
    put:
      summary: Update a project
      operationId: ''
      description: |-
        Updates attributes of an existing project in your Domo instance. The following properties are read-only and cannot be updated with this request:
        - `id`
        - `members`
        - `createdBy`
        - `createdDate`
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: Updates the name of the project
        - schema:
            type: boolean
          in: query
          name: public
          description: Updates whether or not the project is publicly available to Domo users
        - schema:
            type: string
          in: query
          name: description
          description: Updates the description of the project
        - schema:
            type: string
          in: query
          name: dueDate
          description: Updates the due date of the project
      responses:
        '200':
          description: Returns the updated project object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  members:
                    type: array
                    items:
                      type: integer
                  createdBy:
                    type: integer
                  createdDate:
                    type: string
                  public:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '4'
                    name: Scrum Project for Q4
                    members:
                      - 27
                      - 105
                    createdBy: 27
                    createdDate: '2018-08-01T05:00:00Z'
                    public: true
              examples:
                Example 1:
                  value:
                    id: '4'
                    name: Scrum Project for Q4
                    members:
                      - 27
                      - 105
                    createdBy: 27
                    createdDate: '2018-08-01T05:00:00Z'
                    public: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              x-examples:
                Example 1:
                  name: Scrum Project for Q4
            examples:
              Example 1:
                value:
                  name: Scrum Project for Q4
        description: The request body accepts a project object.
    delete:
      summary: Delete a project
      operationId: ''
      responses:
        '200':
          description: Returns the parameter of success or error based on the project ID being valid.
      description: |
        Permanently deletes a project from your Domo instance.
        <!-- theme: danger -->

        > #### Warning
        >
        > This is destructive and cannot be reversed.
  '/v1/project/{PROJECT_ID}/tasks/{TASK_ID}/attachments/{ATTACHMENT_ID}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project that the attachment belongs to
      - schema:
          type: string
        name: TASK_ID
        in: path
        required: true
        description: The ID of the task that the attachment belongs to
      - schema:
          type: string
        name: ATTACHMENT_ID
        in: path
        required: true
        description: The ID of the attachment to be deleted
    delete:
      summary: Delete an attachment
      operationId: ''
      description: |-
        Permanently deletes an attachment from your task.

        <!-- theme: danger -->

        > #### Warning
        >
        > This is destructive and cannot be reversed.
      responses:
        '200':
          description: Returns the parameter of success or error based on the attachment ID being valid.
  '/v1/projects/{PROJECT_ID}/members':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
    get:
      summary: Retrieve project members
      tags: []
      responses:
        '200':
          description: Returns an array of member ids.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                x-examples:
                  Example 1:
                    - 27
                    - 35
                    - 102
              examples:
                Example 1:
                  value:
                    - 27
                    - 35
                    - 102
      operationId: ''
      description: Retrieves a list of ids of the users that are members of the given project id.
    put:
      summary: Update project members
      operationId: ''
      responses:
        '200':
          description: OK
      description: Update the members of a given project id.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
              x-examples:
                Example 1:
                  - 27
                  - 105
                  - 93
                  - 84
                  - 107
            examples:
              Example 1:
                value:
                  - 27
                  - 105
                  - 93
                  - 84
                  - 107
        description: The request body accepts an array of member ids.
  '/v1/projects/{PROJECT_ID}/lists':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
    get:
      summary: Retrieve all project lists
      tags: []
      responses:
        '200':
          description: Returns an array of list objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    type:
                      type: string
                    index:
                      type: integer
                x-examples:
                  Example 1:
                    - id: '4'
                      name: To Do
                      type: TODO
                      index: 1
                    - id: '5'
                      name: Working On
                      type: WORKING_ON
                      index: 2
                    - id: '6'
                      name: Completed
                      type: COMPLETED
                      index: 3
              examples:
                Example 1:
                  value:
                    - id: '4'
                      name: To Do
                      type: TODO
                      index: 1
                    - id: '5'
                      name: Working On
                      type: WORKING_ON
                      index: 2
                    - id: '6'
                      name: Completed
                      type: COMPLETED
                      index: 3
      operationId: ''
      parameters: []
      description: Retrieves all lists available within a given project id.
    post:
      summary: Create a list
      operationId: ''
      responses:
        '200':
          description: Returns a list object when successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  type:
                    type: string
                  index:
                    type: integer
                x-examples:
                  Example 1:
                    id: '13'
                    name: Needs Validation
                    type: TODO
                    index: 3
              examples:
                Example 1:
                  value:
                    id: '13'
                    name: Needs Validation
                    type: TODO
                    index: 3
      description: Creates a new list within the given project id.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: The name of the List
          required: true
        - schema:
            type: string
          in: query
          name: type
          required: true
          description: 'The type of List (i.e. `TODO`, `WORKING_ON`, `COMPLETED`)'
        - schema:
            type: integer
          in: query
          name: index
          description: The ordered index of the list within the project. Setting this property will re-order other lists in the project to maintain sequential order. Leaving this property blank will default the index to 1 and shift the index of all other lists.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                index:
                  type: integer
              x-examples:
                Example 1:
                  name: Needs Validation
                  type: TODO
                  index: 3
            examples:
              Example 1:
                value:
                  name: Needs Validation
                  type: TODO
                  index: 3
        description: The request body accepts a list object.
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list
    get:
      summary: Retrieve Individual List
      tags: []
      responses:
        '200':
          description: Returns a list object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  type:
                    type: string
                  index:
                    type: integer
                x-examples:
                  Example 1:
                    id: '4'
                    name: To Do
                    type: TODO
                    index: 1
              examples:
                Example 1:
                  value:
                    id: '4'
                    name: To Do
                    type: TODO
                    index: 1
      operationId: ''
      description: Retrieves the details of an individual list given a project id and a list id.
    put:
      summary: Update a list
      operationId: ''
      responses:
        '200':
          description: Returns the updated list object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  type:
                    type: string
                  index:
                    type: integer
                x-examples:
                  Example 1:
                    id: '13'
                    name: Needs QA
                    type: TODO
                    index: 3
              examples:
                Example 1:
                  value:
                    id: '13'
                    name: Needs QA
                    type: TODO
                    index: 3
      description: Update the details of a list given an existing project id and list id.
      parameters:
        - schema:
            type: string
          in: query
          name: name
          description: Updated name of the list
          required: true
        - schema:
            type: string
          in: query
          name: type
          description: 'One of the following strings `TODO`, `WORKING_ON`, `COMPLETED`.'
          required: true
        - schema:
            type: integer
          in: query
          name: index
          description: The updated index of the list within the project. Updating the index of a list may also change the order of the other lists in the project to remain sequential.
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                index:
                  type: integer
              x-examples:
                Example 1:
                  name: Needs QA
                  type: TODO
                  index: 3
            examples:
              Example 1:
                value:
                  name: Needs QA
                  type: TODO
                  index: 3
        description: The request body accepts a list object.
    delete:
      summary: Delete a list
      operationId: ''
      responses:
        '200':
          description: Returns the parameter of success or error based on the project ID and list ID being valid.
      description: |-
        Permanently deletes a list from your Domo instance.
        <!-- theme: danger -->

        > #### Warning
        >
        > This is destructive and cannot be reversed.
  '/v1/projects/{PROJECT_ID}/tasks?offset={OFFSET}&limit={LIMIT}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: integer
        name: OFFSET
        in: path
        description: The maximum amount of results to return (defaults to 10 with a maximum of 50)
      - schema:
          type: integer
        name: LIMIT
        in: path
        description: he number of records to offset from the beginning of the result list (defaults to 0)
    get:
      summary: Retrieve all project tasks
      tags: []
      responses:
        '200':
          description: Returns an array of task objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    projectId:
                      type: string
                    projectListId:
                      type: string
                    taskName:
                      type: string
                    createdDate:
                      type: string
                    priority:
                      type: integer
                    createdBy:
                      type: integer
                    ownedBy:
                      type: integer
                    contributors:
                      type: array
                      items:
                        type: integer
                    attachmentCount:
                      type: integer
                    tags:
                      type: array
                      items:
                        type: object
                        properties: {}
                    archived:
                      type: boolean
                x-examples:
                  Example 1:
                    - id: '1'
                      projectId: '2'
                      projectListId: '4'
                      taskName: User Story Mapping
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '2'
                      projectId: '2'
                      projectListId: '4'
                      taskName: UML Architecture
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 2
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '3'
                      projectId: '2'
                      projectListId: '4'
                      taskName: Project Scaffolding
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 3
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '4'
                      projectId: '2'
                      projectListId: '14'
                      taskName: Initial Commit
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
              examples:
                Example 1:
                  value:
                    - id: '1'
                      projectId: '2'
                      projectListId: '4'
                      taskName: User Story Mapping
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '2'
                      projectId: '2'
                      projectListId: '4'
                      taskName: UML Architecture
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 2
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '3'
                      projectId: '2'
                      projectListId: '4'
                      taskName: Project Scaffolding
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 3
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '4'
                      projectId: '2'
                      projectListId: '14'
                      taskName: Initial Commit
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
      operationId: ''
      description: Retrieves all tasks from a given project id.
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}/tasks?offset={OFFSET}&limit={LIMIT}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list
      - schema:
          type: integer
        name: OFFSET
        in: path
        description: The maximum amount of results to return (defaults to 10 with a maximum of 50)
      - schema:
          type: integer
        name: LIMIT
        in: path
        description: The number of records to offset from the beginning of the result list (defaults to 0)
    get:
      summary: Retrieve all List tasks
      tags: []
      responses:
        '200':
          description: Returns an array of task objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    projectId:
                      type: string
                    projectListId:
                      type: string
                    taskName:
                      type: string
                    createdDate:
                      type: string
                    priority:
                      type: integer
                    createdBy:
                      type: integer
                    ownedBy:
                      type: integer
                    contributors:
                      type: array
                      items:
                        type: integer
                    attachmentCount:
                      type: integer
                    tags:
                      type: array
                      items:
                        type: object
                        properties: {}
                    archived:
                      type: boolean
                x-examples:
                  Example 1:
                    - id: '1'
                      projectId: '2'
                      projectListId: '4'
                      taskName: User Story Mapping
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '2'
                      projectId: '2'
                      projectListId: '4'
                      taskName: UML Architecture
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 2
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '3'
                      projectId: '2'
                      projectListId: '4'
                      taskName: Project Scaffolding
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 3
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
              examples:
                Example 1:
                  value:
                    - id: '1'
                      projectId: '2'
                      projectListId: '4'
                      taskName: User Story Mapping
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 1
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '2'
                      projectId: '2'
                      projectListId: '4'
                      taskName: UML Architecture
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 2
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
                    - id: '3'
                      projectId: '2'
                      projectListId: '4'
                      taskName: Project Scaffolding
                      createdDate: '2018-08-01T07:00:00Z'
                      priority: 3
                      createdBy: 27
                      ownedBy: 27
                      contributors:
                        - 27
                      attachmentCount: 0
                      tags: []
                      archived: false
      operationId: ''
      description: Retrieves all tasks from a given project id and list id.
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}/tasks/{TASK_ID}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list
      - schema:
          type: string
        name: TASK_ID
        in: path
        required: true
        description: The ID of the task
    get:
      summary: Retrieve individual task
      tags: []
      responses:
        '200':
          description: Returns a task object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  projectId:
                    type: string
                  projectListId:
                    type: string
                  taskName:
                    type: string
                  createdDate:
                    type: string
                  updatedDate:
                    type: string
                  priority:
                    type: integer
                  createdBy:
                    type: integer
                  ownedBy:
                    type: integer
                  contributors:
                    type: array
                    items:
                      type: integer
                  attachmentCount:
                    type: integer
                  tags:
                    type: array
                    items:
                      type: object
                      properties: {}
                  archived:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '3'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Project Scaffolding
                    createdDate: '2018-08-01T07:00:00Z'
                    updatedDate: '2018-08-01T07:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
              examples:
                Example 1:
                  value:
                    id: '3'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Project Scaffolding
                    createdDate: '2018-08-01T07:00:00Z'
                    updatedDate: '2018-08-01T07:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
      operationId: ''
      description: Retrieves an individual task from a given project id and list id.
    put:
      summary: Update a Task
      operationId: ''
      responses:
        '200':
          description: Returns the updated task object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  projectId:
                    type: string
                  projectListId:
                    type: string
                  taskName:
                    type: string
                  createdDate:
                    type: string
                  updatedDate:
                    type: string
                  priority:
                    type: integer
                  createdBy:
                    type: integer
                  ownedBy:
                    type: integer
                  contributors:
                    type: array
                    items:
                      type: integer
                  attachmentCount:
                    type: integer
                  tags:
                    type: array
                    items:
                      type: object
                      properties: {}
                  archived:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '3'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Project Scaffolding and Infrastructure
                    createdDate: '2018-08-01T07:00:00Z'
                    updatedDate: '2018-08-01T08:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
              examples:
                Example 1:
                  value:
                    id: '3'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Project Scaffolding and Infrastructure
                    createdDate: '2018-08-01T07:00:00Z'
                    updatedDate: '2018-08-01T08:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
      description: 'Update the details of a task given an existing project id, list id, and task id.'
      parameters:
        - schema:
            type: string
          in: query
          name: taskName
          description: The name of the task
        - schema:
            type: string
          in: query
          name: description
          description: An optional description of the task
        - schema:
            type: string
          in: query
          name: dueDate
          description: The date the task is expected to be completed
        - schema:
            type: string
          in: query
          name: priority
          description: Priority of task within a list. Setting this property will impact the index of other tasks in the list to maintain sequential order.
        - schema:
            type: string
          in: query
          name: ownedBy
          description: The ID of the Domo user that owns the task
        - schema:
            type: string
          in: query
          name: contributors
          description: An array of user IDs that are assigned as contributors to the task
        - schema:
            type: string
          in: query
          name: tags
          description: An array of tags that have been assigned to the task
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                projectId:
                  type: string
                projectListId:
                  type: string
                taskName:
                  type: string
                priority:
                  type: integer
                contributors:
                  type: array
                  items:
                    type: integer
                tags:
                  type: array
                  items:
                    type: object
                    properties: {}
                archived:
                  type: boolean
              x-examples:
                Example 1:
                  id: '3'
                  projectId: '2'
                  projectListId: '4'
                  taskName: Project Scaffolding and Infrastructure
                  priority: 3
                  contributors:
                    - 27
                  tags: []
                  archived: false
            examples:
              Example 1:
                value:
                  id: '3'
                  projectId: '2'
                  projectListId: '4'
                  taskName: Project Scaffolding and Infrastructure
                  priority: 3
                  contributors:
                    - 27
                  tags: []
                  archived: false
        description: The request body accepts a task object.
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}/tasks':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project that the task belongs to
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list within a project that the task belongs to
    put:
      summary: Create a task
      operationId: ''
      responses:
        '200':
          description: Returns the task object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  projectId:
                    type: string
                  projectListId:
                    type: string
                  taskName:
                    type: string
                  createdDate:
                    type: string
                  updatedDate:
                    type: string
                  priority:
                    type: integer
                  createdBy:
                    type: integer
                  ownedBy:
                    type: integer
                  contributors:
                    type: array
                    items:
                      type: integer
                  attachmentCount:
                    type: integer
                  tags:
                    type: array
                    items:
                      type: object
                      properties: {}
                  archived:
                    type: boolean
                x-examples:
                  Example 1:
                    id: '5'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Business Plan Review
                    createdDate: '2018-08-01T08:00:00Z'
                    updatedDate: '2018-08-01T08:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
              examples:
                Example 1:
                  value:
                    id: '5'
                    projectId: '2'
                    projectListId: '4'
                    taskName: Business Plan Review
                    createdDate: '2018-08-01T08:00:00Z'
                    updatedDate: '2018-08-01T08:00:00Z'
                    priority: 3
                    createdBy: 27
                    ownedBy: 27
                    contributors:
                      - 27
                    attachmentCount: 0
                    tags: []
                    archived: false
      description: Add a task to a project list.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                projectId:
                  type: string
                projectListId:
                  type: string
                taskName:
                  type: string
                priority:
                  type: integer
                contributors:
                  type: array
                  items:
                    type: integer
                tags:
                  type: array
                  items:
                    type: object
                    properties: {}
                archived:
                  type: boolean
              x-examples:
                Example 1:
                  id: '3'
                  projectId: '2'
                  projectListId: '4'
                  taskName: Business Plan Review
                  priority: 3
                  contributors:
                    - 27
                  tags: []
                  archived: false
            examples:
              Example 1:
                value:
                  id: '3'
                  projectId: '2'
                  projectListId: '4'
                  taskName: Business Plan Review
                  priority: 3
                  contributors:
                    - 27
                  tags: []
                  archived: false
        description: The request body accepts a task object.
      parameters:
        - schema:
            type: string
          in: query
          name: taskName
          description: The name of the task
          required: true
        - schema:
            type: string
          in: query
          name: description
          description: An optional description of the task
        - schema:
            type: string
          in: query
          name: dueDate
          description: The date the task is expected to be completed
        - schema:
            type: integer
          in: query
          name: priority
          description: Priority of task within a list. Setting this property will impact the index of other tasks in the list to maintain sequential order. If not provided the priority will default to 1 and the index of all the other tasks in the list will shift.
        - schema:
            type: integer
          in: query
          name: ownedBy
          description: The ID of the Domo user that owns the task
        - schema:
            type: integer
          in: query
          name: contributors
          description: An array of user IDs that are assigned as contributors to the task
        - schema:
            type: string
          in: query
          name: tags
          description: An array of tags that have been assigned to the task
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}/tasks/{TASK_ID}/attachments':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list
      - schema:
          type: string
        name: TASK_ID
        in: path
        required: true
        description: The ID of the task
    get:
      summary: Retrieve list of attachments
      tags: []
      responses:
        '200':
          description: Returns an array of attachment objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    taskId:
                      type: integer
                    createdDate:
                      type: string
                    createdBy:
                      type: integer
                    fileName:
                      type: string
                    mimeType:
                      type: string
                x-examples:
                  Example 1:
                    - id: 2
                      taskId: 5
                      createdDate: '2018-08-01T09:00:00Z'
                      createdBy: 27
                      fileName: dataflows.csv
                      mimeType: text/csv
                    - id: 1
                      taskId: 5
                      createdDate: '2018-08-01T09:00:00Z'
                      createdBy: 27
                      fileName: logo.png
                      mimeType: image/png
              examples:
                Example 1:
                  value:
                    - id: 2
                      taskId: 5
                      createdDate: '2018-08-01T09:00:00Z'
                      createdBy: 27
                      fileName: dataflows.csv
                      mimeType: text/csv
                    - id: 1
                      taskId: 5
                      createdDate: '2018-08-01T09:00:00Z'
                      createdBy: 27
                      fileName: logo.png
                      mimeType: image/png
      operationId: ''
      description: Retrieve details about all of the attachments belonging to a particular task.
    post:
      summary: Add attachment
      operationId: ''
      responses:
        '200':
          description: Returns the attachment object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  taskId:
                    type: integer
                  createdDate:
                    type: string
                  createdBy:
                    type: integer
                  fileName:
                    type: string
                  mimeType:
                    type: string
                x-examples:
                  Example 1:
                    id: 3
                    taskId: 5
                    createdDate: '2018-08-01T09:00:00Z'
                    createdBy: 27
                    fileName: Domo Validation.xlsx
                    mimeType: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
              examples:
                Example 1:
                  value:
                    id: 3
                    taskId: 5
                    createdDate: '2018-08-01T09:00:00Z'
                    createdBy: 27
                    fileName: Domo Validation.xlsx
                    mimeType: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      description: Add a multipart form file to a task item as an attachment.
  '/v1/projects/{PROJECT_ID}/lists/{LIST_ID}/tasks/{TASK_ID}/attachments/{ATTACHMENT_ID}':
    parameters:
      - schema:
          type: string
        name: PROJECT_ID
        in: path
        required: true
        description: The ID of the project
      - schema:
          type: string
        name: LIST_ID
        in: path
        required: true
        description: The ID of the list
      - schema:
          type: string
        name: TASK_ID
        in: path
        required: true
        description: The ID of the task
      - schema:
          type: string
        name: ATTACHMENT_ID
        in: path
        required: true
        description: The ID of the attachment
    get:
      summary: Download attachment
      operationId: get-v1-projects-PROJECT_ID-lists-LIST_ID-tasks-TASK_ID-attachments-ATTACHMENT_ID
      responses:
        '200':
          description: Returns the downloaded bytes of the attachment on the response body.
      description: Downloads an individual attachment given an attachment id.
components:
  schemas: {}
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - API Key - 1: []
